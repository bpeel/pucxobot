General notes
=============

The protocol is based on the WebSocket protocol. Once a WebSocket
connection is established, each end sends messages that correspond to
WebSocket messages. Each message begins with a single byte
containining the message ID. After that is the payload. The contents
of the payload depends on the message type, as described below. Each
message must be exactly sized to contain the message ID + the payload,
ie, there can be no extra data at the end of the message.

All numbers are in little-endian.

A player in the game is distinct from the network connection. The
intention is that if the connection is dropped then the client can
reconnect and recover without creating a new player. Instead a player
is identified by a 64-bit ID which is randomly generated by the
server. When connecting the client can either request a new player or
it can send this ID in order to continue with a previous player.

Strings are sent as NULL-terminated UTF-8 text.

Messages to the server
======================

The client initiates the communication by sending one of the following
messages:

NEW_PLAYER (0x80)
-----------------

• string name
• string game_type

This should be sent when the client first starts and hasn't tried
connecting before. The server will create a player ID and send it in a
PLAYER_ID message.

RECONNECT (0x81)
----------------

• uint64_t player_id

This should be sent if the connection is dropped in order to resume.
The player_id must be a valid ID given from a previous PLAYER_ID
message from the server.

BUTTON (0x82)
----------------------

• The data of a button to be pressed. The data to placed here can be
  retrieved from the MESSAGE message.

KEEP_ALIVE (0x83)
-----------------

• No payload

Some data must be sent by the client at least every minute or the
server will close the connection. If nothing else needs to be sent the
client can send this empty message. No response is sent.

LEAVE (0x84)
------------

Leave the current game. This doesn’t actually affect the player and it
will still exist in the game. It is meant as a friendly way for the
client to inform the server that the player has gone such as by
closing the browser tab.

Messages to the client
======================

PLAYER_ID (0x00)
----------------

• uint64_t player_id

This is sent as the first message in response to a NEW_PLAYER command
in order to report the player's ID. If the player instead sends a
RECONNECT message this won't be sent unless the player was lost in
which case a new player ID will be generated. Therefore the client
should be prepared to update its player ID whenever this message is
received.

MESSAGE (0x01)
--------------

• uint8_t message flags
  1: The message is HTML, otherwise plain text
  2: The message is private for this player, public otherwise
• string text

Following the text is a list of buttons terminated until the end of
the payload.

• string data – The data to send to press this button
• string text – The text to display on the button
